#!/usr/bin/env python
#
# Script to generate a human-readable changelog based on different manufests.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the the GNU General Public License version 3, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranties of
# MERCHANTABILITY, SATISFACTORY QUALITY or FITNESS FOR A PARTICULAR
# PURPOSE.  See the applicable version of the GNU Lesser General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright (C) 2013 Canonical, Ltd.
#

import argparse
import apt_pkg
from launchpadlib.launchpad import Launchpad
from urllib import urlopen
from debian import deb822

VERSION = "0.1"
cachedir = "~/.launchpadlib/cache"

# TODO:
# * Find changes not only for the latest version, but since the previous
# * Treat better when there is a mismatch about binary version and src package
#   version

# List of ppas where we can look for change files (for proper changelog)
## team: ppas
ppas = {'phablet-team': ['ppa'],
        'ubuntu-touch-coreapps-drivers': ['daily'],
        'ubuntu-unity': ['daily-build'],
        }

lp = Launchpad.login_anonymously('changelog prober', 'production',
                                 cachedir, version="devel")

def print_changelog(change_urls):
    """Print the Changes content based on the changes launchpad url"""
    # First iterate to find possible duplicates
    changes = {}
    for change_url in change_urls:
        try:
            change = deb822.Changes(urlopen(change_url, proxies={}))
            source = change.get_as_string('Source')
            changes[source] = change
        except:
            # Ignore error for now, just move on
            pass

    if changes:
        print "\nChangelog for Changed Packages:"
        for source, change in changes.items():
            try:
                print change.get_as_string('Changes').replace(" .\n", " \n")
                print "\n  -- %s  %s" % (change.get_as_string('Changed-By'),
                                    change.get_as_string('Date'))
            except:
                # Ignore error for now, just move on
                pass

def parse_arguments():
    parser = argparse.ArgumentParser(
            description='Print Changelog for a PPA/Archive comparing manifests')
    parser.add_argument('-o', '--old-manifest', required=True,
            help='old manifest')
    parser.add_argument('-n', '--new-manifest', required=True,
            help='new manifest')
    parser.add_argument('-s', '--series', default='quantal',
            help='ubuntu series to look for changes (default: quantal)')
    parser.add_argument('--version', action='version',
            version='%(prog)s ' + VERSION)
    return parser.parse_args()

if __name__ == '__main__':
    apt_pkg.init_system()
    args = parse_arguments()

    old_manifest = [line.strip().split("\t")
                        for line in open(args.old_manifest).readlines()]
    new_manifest = [line.strip().split("\t")
                        for line in open(args.new_manifest).readlines()]

    # Iterate and identify the newer packages (or more recent version)
    old_dict = {pkg:version for pkg, version in old_manifest}
    new_dict = {pkg:version for pkg, version in new_manifest}

    new_pkgs = {}
    changed_pkgs = {}
    removed_pkgs = {}

    # Look for new packages
    new_pkgs = {pkg:new_dict[pkg]
            for pkg in (set(new_dict) - set(old_dict))}
    removed_pkgs = {pkg:old_dict[pkg]
            for pkg in (set(old_dict) - set(new_dict))}

    for pkg in set(old_dict).intersection(set(new_dict)):
        old_version = old_dict[pkg]
        new_version = new_dict[pkg]
        if apt_pkg.version_compare(new_version, old_version) > 0:
            changed_pkgs[pkg] = new_version

    # Print the Added/Removed packages first
    if new_pkgs:
        print "\nAdded Packages:"
        for pkg in sorted(new_pkgs.iterkeys()):
            print "%s - %s" % (pkg, new_pkgs[pkg])

    if removed_pkgs:
        print "\nRemoved Packages:"
        for pkg in sorted(removed_pkgs.iterkeys()):
            print "%s - %s" % (pkg, removed_pkgs[pkg])

    # Then check for changed packages
    change_urls = []

    # First check with the packages from the PPA list, then Ubuntu archive
    for team in ppas:
        for ppa_name in ppas[team]:
            ppa = lp.people[team].getPPAByName(name=ppa_name)
            series = ppa.distribution.getSeries(name_or_version=args.series)
            for pkg, version in list(changed_pkgs.items()):
                pkg_uploads = series.getPackageUploads(archive=ppa,
                                         name=pkg.split(":")[0],
                                         version=version, exact_match=True)
                if pkg_uploads:
                    # We don't care about arch/src mismatch, just get the first
                    change_urls.append(pkg_uploads[0].changes_file_url)
                    # Make sure we remove from the changed_pkgs list so we
                    # don't check it again against the rest of the PPAs
                    del changed_pkgs[pkg]

    # If we still have remaining packages, look at the Ubuntu archive
    if changed_pkgs:
        ubuntu = lp.distributions["ubuntu"]
        series = ubuntu.getSeries(name_or_version=args.series)
        for pkg, version in list(changed_pkgs.items()):
            pkg_uploads = series.getPackageUploads(archive=ubuntu.main_archive,
                                     name=pkg.split(":")[0],
                                     version=version, exact_match=True)
            if pkg_uploads:
                # We don't care about arch/src mismatch, just get the first
                change_urls.append(pkg_uploads[0].changes_file_url)
                del changed_pkgs[pkg]

    if len(changed_pkgs) != 0:
        print "\nPackages that could not be found at Launchpad:"
        for pkg, version in list(changed_pkgs.items()):
            print "%s - %s" % (pkg, version)

    # Print the Changelog
    if change_urls:
        print_changelog(change_urls)
